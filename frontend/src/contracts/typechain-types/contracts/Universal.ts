/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RevertContextStruct = {
  sender: PromiseOrValue<string>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type RevertContextStructOutput = [string, string, BigNumber, string] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  revertMessage: string;
};

export type CallOptionsStruct = {
  gasLimit: PromiseOrValue<BigNumberish>;
  isArbitraryCall: PromiseOrValue<boolean>;
};

export type CallOptionsStructOutput = [BigNumber, boolean] & {
  gasLimit: BigNumber;
  isArbitraryCall: boolean;
};

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export type MessageContextStruct = {
  sender: PromiseOrValue<BytesLike>;
  senderEVM: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type MessageContextStructOutput = [string, string, BigNumber] & {
  sender: string;
  senderEVM: string;
  chainID: BigNumber;
};

export interface UniversalInterface extends utils.Interface {
  functions: {
    "call(bytes,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "callMulti(bytes[],address[],bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "gateway()": FunctionFragment;
    "onCall((bytes,address,uint256),address,uint256,bytes)": FunctionFragment;
    "onRevert((address,address,uint256,bytes))": FunctionFragment;
    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "call"
      | "callMulti"
      | "gateway"
      | "onCall"
      | "onRevert"
      | "withdraw"
      | "withdrawAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callMulti",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onCall",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRevert",
    values: [RevertContextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCall",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onRevert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCall",
    data: BytesLike
  ): Result;

  events: {
    "HelloEvent(string,string)": EventFragment;
    "RevertEvent(string,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelloEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevertEvent"): EventFragment;
}

export interface HelloEventEventObject {
  arg0: string;
  arg1: string;
}
export type HelloEventEvent = TypedEvent<
  [string, string],
  HelloEventEventObject
>;

export type HelloEventEventFilter = TypedEventFilter<HelloEventEvent>;

export interface RevertEventEventObject {
  arg0: string;
  arg1: RevertContextStructOutput;
}
export type RevertEventEvent = TypedEvent<
  [string, RevertContextStructOutput],
  RevertEventEventObject
>;

export type RevertEventEventFilter = TypedEventFilter<RevertEventEvent>;

export interface Universal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callMulti(
      receiverArray: PromiseOrValue<BytesLike>[],
      zrc20Array: PromiseOrValue<string>[],
      messages: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    onCall(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onRevert(
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndCall(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  call(
    receiver: PromiseOrValue<BytesLike>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callMulti(
    receiverArray: PromiseOrValue<BytesLike>[],
    zrc20Array: PromiseOrValue<string>[],
    messages: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  onCall(
    context: MessageContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onRevert(
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndCall(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    callMulti(
      receiverArray: PromiseOrValue<BytesLike>[],
      zrc20Array: PromiseOrValue<string>[],
      messages: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    onCall(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onRevert(
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndCall(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HelloEvent(string,string)"(
      arg0?: null,
      arg1?: null
    ): HelloEventEventFilter;
    HelloEvent(arg0?: null, arg1?: null): HelloEventEventFilter;

    "RevertEvent(string,tuple)"(
      arg0?: null,
      arg1?: null
    ): RevertEventEventFilter;
    RevertEvent(arg0?: null, arg1?: null): RevertEventEventFilter;
  };

  estimateGas: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callMulti(
      receiverArray: PromiseOrValue<BytesLike>[],
      zrc20Array: PromiseOrValue<string>[],
      messages: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    onCall(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onRevert(
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndCall(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callMulti(
      receiverArray: PromiseOrValue<BytesLike>[],
      zrc20Array: PromiseOrValue<string>[],
      messages: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onCall(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onRevert(
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndCall(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
