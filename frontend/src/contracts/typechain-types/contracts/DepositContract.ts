/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace DepositContract {
  export type SupportedAssetStruct = {
    isSupported: PromiseOrValue<boolean>;
    decimals: PromiseOrValue<BigNumberish>;
    isNative: PromiseOrValue<boolean>;
  };

  export type SupportedAssetStructOutput = [boolean, number, boolean] & {
    isSupported: boolean;
    decimals: number;
    isNative: boolean;
  };
}

export interface DepositContractInterface extends utils.Interface {
  functions: {
    "addSupportedAsset(address,uint8,bool)": FunctionFragment;
    "assetsList(uint256)": FunctionFragment;
    "borrowCrossChain(address,uint256,uint256,address)": FunctionFragment;
    "depositEth(address)": FunctionFragment;
    "depositToken(address,uint256,address)": FunctionFragment;
    "gateway()": FunctionFragment;
    "getAssetInfo(address)": FunctionFragment;
    "getSupportedAssets()": FunctionFragment;
    "isAssetSupported(address)": FunctionFragment;
    "lendingProtocolAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeSupportedAsset(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayEth(address)": FunctionFragment;
    "repayToken(address,uint256,address)": FunctionFragment;
    "supportedAssets(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateLendingProtocolAddress(address,uint256)": FunctionFragment;
    "withdrawCrossChain(address,uint256,uint256,address)": FunctionFragment;
    "zetaChainId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSupportedAsset"
      | "assetsList"
      | "borrowCrossChain"
      | "depositEth"
      | "depositToken"
      | "gateway"
      | "getAssetInfo"
      | "getSupportedAssets"
      | "isAssetSupported"
      | "lendingProtocolAddress"
      | "owner"
      | "removeSupportedAsset"
      | "renounceOwnership"
      | "repayEth"
      | "repayToken"
      | "supportedAssets"
      | "transferOwnership"
      | "updateLendingProtocolAddress"
      | "withdrawCrossChain"
      | "zetaChainId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSupportedAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCrossChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetSupported",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingProtocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSupportedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayEth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingProtocolAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCrossChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zetaChainId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetsList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingProtocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingProtocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zetaChainId",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(address,uint8,bool)": EventFragment;
    "AssetRemoved(address)": EventFragment;
    "BorrowCrossChainInitiated(address,address,uint256,uint256,address)": EventFragment;
    "DepositInitiated(address,address,uint256,address)": EventFragment;
    "LendingProtocolAddressUpdated(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawCrossChainInitiated(address,address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowCrossChainInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositInitiated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingProtocolAddressUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawCrossChainInitiated"
  ): EventFragment;
}

export interface AssetAddedEventObject {
  asset: string;
  decimals: number;
  isNative: boolean;
}
export type AssetAddedEvent = TypedEvent<
  [string, number, boolean],
  AssetAddedEventObject
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetRemovedEventObject {
  asset: string;
}
export type AssetRemovedEvent = TypedEvent<[string], AssetRemovedEventObject>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface BorrowCrossChainInitiatedEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
  destinationChain: BigNumber;
  recipient: string;
}
export type BorrowCrossChainInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  BorrowCrossChainInitiatedEventObject
>;

export type BorrowCrossChainInitiatedEventFilter =
  TypedEventFilter<BorrowCrossChainInitiatedEvent>;

export interface DepositInitiatedEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
  onBehalfOf: string;
}
export type DepositInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  DepositInitiatedEventObject
>;

export type DepositInitiatedEventFilter =
  TypedEventFilter<DepositInitiatedEvent>;

export interface LendingProtocolAddressUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
  chainId: BigNumber;
}
export type LendingProtocolAddressUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  LendingProtocolAddressUpdatedEventObject
>;

export type LendingProtocolAddressUpdatedEventFilter =
  TypedEventFilter<LendingProtocolAddressUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawCrossChainInitiatedEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
  destinationChain: BigNumber;
  recipient: string;
}
export type WithdrawCrossChainInitiatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  WithdrawCrossChainInitiatedEventObject
>;

export type WithdrawCrossChainInitiatedEventFilter =
  TypedEventFilter<WithdrawCrossChainInitiatedEvent>;

export interface DepositContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepositContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupportedAsset(
      asset: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    borrowCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    getAssetInfo(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DepositContract.SupportedAssetStructOutput]>;

    getSupportedAssets(overrides?: CallOverrides): Promise<[string[]]>;

    isAssetSupported(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lendingProtocolAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeSupportedAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isSupported: boolean;
        decimals: number;
        isNative: boolean;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLendingProtocolAddress(
      _newLendingProtocolAddress: PromiseOrValue<string>,
      _expectedZetaChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zetaChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addSupportedAsset(
    asset: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    isNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  borrowCrossChain(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destinationChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    onBehalfOf: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  getAssetInfo(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DepositContract.SupportedAssetStructOutput>;

  getSupportedAssets(overrides?: CallOverrides): Promise<string[]>;

  isAssetSupported(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lendingProtocolAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeSupportedAsset(
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayEth(
    onBehalfOf: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayToken(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, boolean] & {
      isSupported: boolean;
      decimals: number;
      isNative: boolean;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLendingProtocolAddress(
    _newLendingProtocolAddress: PromiseOrValue<string>,
    _expectedZetaChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCrossChain(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destinationChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zetaChainId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addSupportedAsset(
      asset: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      isNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    assetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    borrowCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    getAssetInfo(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DepositContract.SupportedAssetStructOutput>;

    getSupportedAssets(overrides?: CallOverrides): Promise<string[]>;

    isAssetSupported(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lendingProtocolAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeSupportedAsset(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, boolean] & {
        isSupported: boolean;
        decimals: number;
        isNative: boolean;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLendingProtocolAddress(
      _newLendingProtocolAddress: PromiseOrValue<string>,
      _expectedZetaChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    zetaChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AssetAdded(address,uint8,bool)"(
      asset?: PromiseOrValue<string> | null,
      decimals?: null,
      isNative?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      asset?: PromiseOrValue<string> | null,
      decimals?: null,
      isNative?: null
    ): AssetAddedEventFilter;

    "AssetRemoved(address)"(
      asset?: PromiseOrValue<string> | null
    ): AssetRemovedEventFilter;
    AssetRemoved(
      asset?: PromiseOrValue<string> | null
    ): AssetRemovedEventFilter;

    "BorrowCrossChainInitiated(address,address,uint256,uint256,address)"(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): BorrowCrossChainInitiatedEventFilter;
    BorrowCrossChainInitiated(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): BorrowCrossChainInitiatedEventFilter;

    "DepositInitiated(address,address,uint256,address)"(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      onBehalfOf?: PromiseOrValue<string> | null
    ): DepositInitiatedEventFilter;
    DepositInitiated(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      onBehalfOf?: PromiseOrValue<string> | null
    ): DepositInitiatedEventFilter;

    "LendingProtocolAddressUpdated(address,address,uint256)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null
    ): LendingProtocolAddressUpdatedEventFilter;
    LendingProtocolAddressUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null
    ): LendingProtocolAddressUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WithdrawCrossChainInitiated(address,address,uint256,uint256,address)"(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): WithdrawCrossChainInitiatedEventFilter;
    WithdrawCrossChainInitiated(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): WithdrawCrossChainInitiatedEventFilter;
  };

  estimateGas: {
    addSupportedAsset(
      asset: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetInfo(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    isAssetSupported(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingProtocolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeSupportedAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLendingProtocolAddress(
      _newLendingProtocolAddress: PromiseOrValue<string>,
      _expectedZetaChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zetaChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedAsset(
      asset: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetInfo(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAssetSupported(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingProtocolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSupportedAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayEth(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayToken(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLendingProtocolAddress(
      _newLendingProtocolAddress: PromiseOrValue<string>,
      _expectedZetaChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCrossChain(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destinationChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zetaChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
