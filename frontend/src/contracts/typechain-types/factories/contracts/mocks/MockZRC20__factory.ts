/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockZRC20,
  MockZRC20Interface,
} from "../../../contracts/mocks/MockZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "GAS_COIN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_FLAT_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103d057610db180380380610019816103d5565b9283398101906080818303126103d05780516001600160401b0381116103d057826100459183016103fa565b602082015190926001600160401b0382116103d0576100659183016103fa565b9060408101519060ff82168092036103d0576060015183519091906001600160401b0381116102d957600354600181811c911680156103c6575b60208210146102b957601f8111610361575b50602094601f82116001146102fa579481929394956000926102ef575b50508160011b916000199060031b1c1916176003555b82516001600160401b0381116102d957600454600181811c911680156102cf575b60208210146102b957601f8111610254575b506020601f82116001146101ed57819293946000926101e2575b50508160011b916000199060031b1c1916176004555b60ff19600554161760055533156101cc576002548181018091116101b657600255600033815280602052604081208281540190556040519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a360405161094b90816104668239f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610131565b601f198216906004600052806000209160005b81811061023c57509583600195969710610223575b505050811b01600455610147565b015160001960f88460031b161c19169055388080610215565b9192602060018192868b015181550194019201610200565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102af575b601f0160051c01905b8181106102a35750610117565b60008155600101610296565b909150819061028d565b634e487b7160e01b600052602260045260246000fd5b90607f1690610105565b634e487b7160e01b600052604160045260246000fd5b0151905038806100ce565b601f198216956003600052806000209160005b88811061034957508360019596979810610330575b505050811b016003556100e4565b015160001960f88460031b161c19169055388080610322565b9192602060018192868501518155019401920161030d565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103bc575b601f0160051c01905b8181106103b057506100b1565b600081556001016103a3565b909150819061039a565b90607f169061009f565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102d957604052565b81601f820112156103d0578051906001600160401b0382116102d957610429601f8301601f19166020016103d5565b92828452602083830101116103d05760005b82811061045057505060206000918301015290565b8060208092840101518282870101520161043b56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461060757508063095ea7b31461058157806318160ddd1461056357806323b872dd14610476578063313ce5671461045557806340c10f191461043957806347e7ef24146104145780634d8943bb146103f257806363a63d5b146103d657806370a082311461039c57806395d89b41146102945780639dc29fac1461026d578063a9059cbb14610247578063c70126261461014d578063d9eeebed146101255763dd62ed3e146100cf57600080fd5b34610120576040366003190112610120576100e861070c565b6100f0610722565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b600080fd5b3461012057600036600319011261012057604080516000815266038d7ea4c680006020820152f35b346101205760403660031901126101205760043567ffffffffffffffff811161012057366023820112156101205780600401359067ffffffffffffffff821161023157604051916101a8601f8201601f191660200184610738565b808352366024828401011161012057600092816024602094018483013701015260243533600052600060205280604060002054106101f5576101ea9033610894565b602060405160018152f35b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b34610120576040366003190112610120576101ea61026361070c565b602435903361075a565b346101205760403660031901126101205761029261028961070c565b60243590610894565b005b346101205760003660031901126101205760405160006004548060011c90600181168015610392575b60208310811461037e5782855290811561035a57506001146102fa575b6102f6836102ea81850382610738565b604051918291826106c3565b0390f35b91905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b808210610340575090915081016020016102ea6102da565b919260018160209254838588010152019101909291610328565b60ff191660208086019190915291151560051b840190910191506102ea90506102da565b634e487b7160e01b84526022600452602484fd5b91607f16916102bd565b34610120576020366003190112610120576001600160a01b036103bd61070c565b1660005260006020526020604060002054604051908152f35b3461012057600036600319011261012057602060405160008152f35b3461012057600036600319011261012057602060405166038d7ea4c680008152f35b34610120576040366003190112610120576101ea61043061070c565b6024359061081f565b346101205760403660031901126101205761029261043061070c565b3461012057600036600319011261012057602060ff60055416604051908152f35b346101205760603660031901126101205761048f61070c565b610497610722565b6001600160a01b03821660008181526001602090815260408083203384529091529020549092604435929160001981106104d7575b506101ea935061075a565b83811061054657841561053057331561051a576101ea946000526001602052604060002060018060a01b03331660005260205283604060002091039055846104cc565b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b8390637dc7a0d960e11b6000523360045260245260445260646000fd5b34610120576000366003190112610120576020600254604051908152f35b346101205760403660031901126101205761059a61070c565b602435903315610530576001600160a01b031690811561051a57336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346101205760003660031901126101205760006003548060011c906001811680156106b9575b60208310811461037e5782855290811561035a5750600114610659576102f6836102ea81850382610738565b91905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b916000905b80821061069f575090915081016020016102ea6102da565b919260018160209254838588010152019101909291610687565b91607f169161062d565b91909160208152825180602083015260005b8181106106f6575060409293506000838284010152601f8019910116010190565b80602080928701015160408286010152016106d5565b600435906001600160a01b038216820361012057565b602435906001600160a01b038216820361012057565b90601f8019910116810190811067ffffffffffffffff82111761023157604052565b6001600160a01b0316908115610809576001600160a01b03169182156107f35760008281528060205260408120548281106107d95791604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815280845220818154019055604051908152a3565b916064928463391434e360e21b8452600452602452604452fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b6001600160a01b03169081156107f35760025481810180911161087e576002557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060009284845283825260408420818154019055604051908152a3565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03168015610809576000918183528260205260408320548181106108fc57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b6064939263391434e360e21b8452600452602452604452fdfea264697066735822122068c37ff7d8525cc6083137f39f410b46e6677ee2f87acdbc69064260ea6da2dd64736f6c634300081a0033";

type MockZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZRC20__factory extends ContractFactory {
  constructor(...args: MockZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockZRC20> {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    ) as Promise<MockZRC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): MockZRC20 {
    return super.attach(address) as MockZRC20;
  }
  override connect(signer: Signer): MockZRC20__factory {
    return super.connect(signer) as MockZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZRC20Interface {
    return new utils.Interface(_abi) as MockZRC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZRC20 {
    return new Contract(address, _abi, signerOrProvider) as MockZRC20;
  }
}
