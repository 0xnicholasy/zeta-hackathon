/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockZRC20,
  MockZRC20Interface,
} from "../../../contracts/mocks/MockZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "PROTOCOL_FLAT_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gasToken",
        type: "address",
      },
    ],
    name: "setGasToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103f057610e3c80380380610019816103f5565b9283398101906080818303126103f05780516001600160401b0381116103f0578261004591830161041a565b602082015190926001600160401b0382116103f05761006591830161041a565b9060408101519060ff82168092036103f0576060015183519091906001600160401b0381116102f957600354600181811c911680156103e6575b60208210146102d957601f8111610381575b50602094601f821160011461031a5794819293949560009261030f575b50508160011b916000199060031b1c1916176003555b82516001600160401b0381116102f957600454600181811c911680156102ef575b60208210146102d957601f8111610274575b506020601f821160011461020d5781929394600092610202575b50508160011b916000199060031b1c1916176004555b60ff19600554161760055533156101ec576002548181018091116101d657600255600033815280602052604081208281540190556040519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a360058054610100600160a81b0319163060081b610100600160a81b03161790556040516109b690816104868239f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610131565b601f198216906004600052806000209160005b81811061025c57509583600195969710610243575b505050811b01600455610147565b015160001960f88460031b161c19169055388080610235565b9192602060018192868b015181550194019201610220565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102cf575b601f0160051c01905b8181106102c35750610117565b600081556001016102b6565b90915081906102ad565b634e487b7160e01b600052602260045260246000fd5b90607f1690610105565b634e487b7160e01b600052604160045260246000fd5b0151905038806100ce565b601f198216956003600052806000209160005b88811061036957508360019596979810610350575b505050811b016003556100e4565b015160001960f88460031b161c19169055388080610342565b9192602060018192868501518155019401920161032d565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103dc575b601f0160051c01905b8181106103d057506100b1565b600081556001016103c3565b90915081906103ba565b90607f169061009f565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102f957604052565b81601f820112156103f0578051906001600160401b0382116102f957610449601f8301601f19166020016103f5565b92828452602083830101116103f05760005b82811061047057505060206000918301015290565b8060208092840101518282870101520161045b56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461067257508063095ea7b3146105ec57806318160ddd146105ce5780631e9f8aad1461058e57806323b872dd146104a1578063313ce5671461048057806340c10f191461046457806347e7ef241461043f5780634d8943bb1461041e57806370a08231146103e457806395d89b41146102dc5780639dc29fac146102b5578063a9059cbb1461028f578063c701262614610195578063c91d59fe14610168578063d9eeebed146101305763dd62ed3e146100da57600080fd5b3461012b57604036600319011261012b576100f3610777565b6100fb61078d565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b600080fd5b3461012b57600036600319011261012b576005546040805160089290921c6001600160a01b03168252651b48eb57e000602083015290f35b3461012b57600036600319011261012b5760055460405160089190911c6001600160a01b03168152602090f35b3461012b57604036600319011261012b5760043567ffffffffffffffff811161012b573660238201121561012b5780600401359067ffffffffffffffff821161027957604051916101f0601f8201601f1916602001846107a3565b808352366024828401011161012b576000928160246020940184830137010152602435336000526000602052806040600020541061023d5761023290336108ff565b602060405160018152f35b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b3461012b57604036600319011261012b576102326102ab610777565b60243590336107c5565b3461012b57604036600319011261012b576102da6102d1610777565b602435906108ff565b005b3461012b57600036600319011261012b5760405160006004548060011c906001811680156103da575b6020831081146103c6578285529081156103a25750600114610342575b61033e83610332818503826107a3565b6040519182918261072e565b0390f35b91905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b80821061038857509091508101602001610332610322565b919260018160209254838588010152019101909291610370565b60ff191660208086019190915291151560051b840190910191506103329050610322565b634e487b7160e01b84526022600452602484fd5b91607f1691610305565b3461012b57602036600319011261012b576001600160a01b03610405610777565b1660005260006020526020604060002054604051908152f35b3461012b57600036600319011261012b576020604051651b48eb57e0008152f35b3461012b57604036600319011261012b5761023261045b610777565b6024359061088a565b3461012b57604036600319011261012b576102da61045b610777565b3461012b57600036600319011261012b57602060ff60055416604051908152f35b3461012b57606036600319011261012b576104ba610777565b6104c261078d565b6001600160a01b0382166000818152600160209081526040808320338452909152902054909260443592916000198110610502575b5061023293506107c5565b83811061057157841561055b57331561054557610232946000526001602052604060002060018060a01b03331660005260205283604060002091039055846104f7565b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b8390637dc7a0d960e11b6000523360045260245260445260646000fd5b3461012b57602036600319011261012b576105a7610777565b60058054610100600160a81b03191660089290921b610100600160a81b0316919091179055005b3461012b57600036600319011261012b576020600254604051908152f35b3461012b57604036600319011261012b57610605610777565b60243590331561055b576001600160a01b031690811561054557336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461012b57600036600319011261012b5760006003548060011c90600181168015610724575b6020831081146103c6578285529081156103a257506001146106c45761033e83610332818503826107a3565b91905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b916000905b80821061070a57509091508101602001610332610322565b9192600181602092548385880101520191019092916106f2565b91607f1691610698565b91909160208152825180602083015260005b818110610761575060409293506000838284010152601f8019910116010190565b8060208092870101516040828601015201610740565b600435906001600160a01b038216820361012b57565b602435906001600160a01b038216820361012b57565b90601f8019910116810190811067ffffffffffffffff82111761027957604052565b6001600160a01b0316908115610874576001600160a01b031691821561085e5760008281528060205260408120548281106108445791604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815280845220818154019055604051908152a3565b916064928463391434e360e21b8452600452602452604452fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b6001600160a01b031690811561085e576002548181018091116108e9576002557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060009284845283825260408420818154019055604051908152a3565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b031680156108745760009181835282602052604083205481811061096757817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b6064939263391434e360e21b8452600452602452604452fdfea2646970667358221220024a8eb53782e1b7bb307626ff6e91530879d359fad2904e07e5e72565a2f59364736f6c634300081a0033";

type MockZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZRC20__factory extends ContractFactory {
  constructor(...args: MockZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockZRC20> {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    ) as Promise<MockZRC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): MockZRC20 {
    return super.attach(address) as MockZRC20;
  }
  override connect(signer: Signer): MockZRC20__factory {
    return super.connect(signer) as MockZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZRC20Interface {
    return new utils.Interface(_abi) as MockZRC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZRC20 {
    return new Contract(address, _abi, signerOrProvider) as MockZRC20;
  }
}
