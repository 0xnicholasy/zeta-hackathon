/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockZRC20,
  MockZRC20Interface,
} from "../../../contracts/mocks/MockZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "GAS_LIMIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_FLAT_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gasToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gasFee",
        type: "uint256",
      },
    ],
    name: "setGasFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gasToken",
        type: "address",
      },
    ],
    name: "setGasToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103fa57610ee180380380610019816103ff565b9283398101906080818303126103fa5780516001600160401b0381116103fa5782610045918301610424565b602082015190926001600160401b0382116103fa57610065918301610424565b9060408101519060ff82168092036103fa576060015183519091906001600160401b03811161030357600354600181811c911680156103f0575b60208210146102e357601f811161038b575b50602094601f821160011461032457948192939495600092610319575b50508160011b916000199060031b1c1916176003555b82516001600160401b03811161030357600454600181811c911680156102f9575b60208210146102e357601f811161027e575b506020601f8211600114610217578192939460009261020c575b50508160011b916000199060031b1c1916176004555b60ff19600554161760055533156101f6576002548181018091116101e057600255600033815280602052604081208281540190556040519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a360058054610100600160a81b0319163060081b610100600160a81b0316179055651b48eb57e000600655604051610a5190816104908239f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610131565b601f198216906004600052806000209160005b8181106102665750958360019596971061024d575b505050811b01600455610147565b015160001960f88460031b161c1916905538808061023f565b9192602060018192868b01518155019401920161022a565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102d9575b601f0160051c01905b8181106102cd5750610117565b600081556001016102c0565b90915081906102b7565b634e487b7160e01b600052602260045260246000fd5b90607f1690610105565b634e487b7160e01b600052604160045260246000fd5b0151905038806100ce565b601f198216956003600052806000209160005b8881106103735750836001959697981061035a575b505050811b016003556100e4565b015160001960f88460031b161c1916905538808061034c565b91926020600181928685015181550194019201610337565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103e6575b601f0160051c01905b8181106103da57506100b1565b600081556001016103cd565b90915081906103c4565b90607f169061009f565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761030357604052565b81601f820112156103fa578051906001600160401b03821161030357610453601f8301601f19166020016103ff565b92828452602083830101116103fa5760005b82811061047a57505060206000918301015290565b8060208092840101518282870101520161046556fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461070d57508063091d2788146106ef578063095ea7b3146106695780630a6ab0d61461062357806318160ddd146106055780631e9f8aad146105c557806323b872dd146104d8578063313ce567146104b757806340c10f191461049b57806347e7ef24146104765780634d8943bb14610455578063658612e91461043757806370a08231146103fd57806395d89b41146102f55780639dc29fac146102ce578063a9059cbb146102a8578063c7012626146101ae578063c91d59fe14610181578063d9eeebed146101515763dd62ed3e146100fb57600080fd5b3461014c57604036600319011261014c57610114610812565b61011c610828565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b600080fd5b3461014c57600036600319011261014c57604060018060a01b0360055460081c1660065482519182526020820152f35b3461014c57600036600319011261014c5760055460405160089190911c6001600160a01b03168152602090f35b3461014c57604036600319011261014c5760043567ffffffffffffffff811161014c573660238201121561014c5780600401359067ffffffffffffffff82116102925760405191610209601f8201601f19166020018461083e565b808352366024828401011161014c57600092816024602094018483013701015260243533600052600060205280604060002054106102565761024b903361099a565b602060405160018152f35b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b3461014c57604036600319011261014c5761024b6102c4610812565b6024359033610860565b3461014c57604036600319011261014c576102f36102ea610812565b6024359061099a565b005b3461014c57600036600319011261014c5760405160006004548060011c906001811680156103f3575b6020831081146103df578285529081156103bb575060011461035b575b6103578361034b8185038261083e565b604051918291826107c9565b0390f35b91905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b8082106103a15750909150810160200161034b61033b565b919260018160209254838588010152019101909291610389565b60ff191660208086019190915291151560051b8401909101915061034b905061033b565b634e487b7160e01b84526022600452602484fd5b91607f169161031e565b3461014c57602036600319011261014c576001600160a01b0361041e610812565b1660005260006020526020604060002054604051908152f35b3461014c57600036600319011261014c576020600654604051908152f35b3461014c57600036600319011261014c576020604051651b48eb57e0008152f35b3461014c57604036600319011261014c5761024b610492610812565b60243590610925565b3461014c57604036600319011261014c576102f3610492610812565b3461014c57600036600319011261014c57602060ff60055416604051908152f35b3461014c57606036600319011261014c576104f1610812565b6104f9610828565b6001600160a01b0382166000818152600160209081526040808320338452909152902054909260443592916000198110610539575b5061024b9350610860565b8381106105a857841561059257331561057c5761024b946000526001602052604060002060018060a01b033316600052602052836040600020910390558461052e565b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b8390637dc7a0d960e11b6000523360045260245260445260646000fd5b3461014c57602036600319011261014c576105de610812565b60058054610100600160a81b03191660089290921b610100600160a81b0316919091179055005b3461014c57600036600319011261014c576020600254604051908152f35b3461014c57604036600319011261014c5761063c610812565b60058054610100600160a81b03191660089290921b610100600160a81b0316919091179055602435600655005b3461014c57604036600319011261014c57610682610812565b602435903315610592576001600160a01b031690811561057c57336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461014c57600036600319011261014c5760206040516203d0908152f35b3461014c57600036600319011261014c5760006003548060011c906001811680156107bf575b6020831081146103df578285529081156103bb575060011461075f576103578361034b8185038261083e565b91905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b916000905b8082106107a55750909150810160200161034b61033b565b91926001816020925483858801015201910190929161078d565b91607f1691610733565b91909160208152825180602083015260005b8181106107fc575060409293506000838284010152601f8019910116010190565b80602080928701015160408286010152016107db565b600435906001600160a01b038216820361014c57565b602435906001600160a01b038216820361014c57565b90601f8019910116810190811067ffffffffffffffff82111761029257604052565b6001600160a01b031690811561090f576001600160a01b03169182156108f95760008281528060205260408120548281106108df5791604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815280845220818154019055604051908152a3565b916064928463391434e360e21b8452600452602452604452fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b6001600160a01b03169081156108f957600254818101809111610984576002557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602060009284845283825260408420818154019055604051908152a3565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0316801561090f57600091818352826020526040832054818110610a0257817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b6064939263391434e360e21b8452600452602452604452fdfea264697066735822122012d96a9d6a887737bd4c792969abc08ab93cd6d699f82a544e1b82575a7d36d064736f6c634300081a0033";

type MockZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZRC20__factory extends ContractFactory {
  constructor(...args: MockZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockZRC20> {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    ) as Promise<MockZRC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): MockZRC20 {
    return super.attach(address) as MockZRC20;
  }
  override connect(signer: Signer): MockZRC20__factory {
    return super.connect(signer) as MockZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZRC20Interface {
    return new utils.Interface(_abi) as MockZRC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZRC20 {
    return new Contract(address, _abi, signerOrProvider) as MockZRC20;
  }
}
