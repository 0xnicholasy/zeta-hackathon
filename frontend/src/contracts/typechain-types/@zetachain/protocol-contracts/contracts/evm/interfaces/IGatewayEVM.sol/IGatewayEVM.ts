/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export type RevertContextStruct = {
  sender: PromiseOrValue<string>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type RevertContextStructOutput = [string, string, BigNumber, string] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  revertMessage: string;
};

export type MessageContextStruct = { sender: PromiseOrValue<string> };

export type MessageContextStructOutput = [string] & { sender: string };

export interface IGatewayEVMInterface extends utils.Interface {
  functions: {
    "call(address,bytes,(address,bool,address,bytes,uint256))": FunctionFragment;
    "deposit(address,uint256,address,(address,bool,address,bytes,uint256))": FunctionFragment;
    "deposit(address,(address,bool,address,bytes,uint256))": FunctionFragment;
    "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))": FunctionFragment;
    "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))": FunctionFragment;
    "execute((address),address,bytes)": FunctionFragment;
    "executeRevert(address,bytes,(address,address,uint256,bytes))": FunctionFragment;
    "executeWithERC20((address),address,address,uint256,bytes)": FunctionFragment;
    "revertWithERC20(address,address,uint256,bytes,(address,address,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "call"
      | "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"
      | "deposit(address,(address,bool,address,bytes,uint256))"
      | "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"
      | "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"
      | "execute"
      | "executeRevert"
      | "executeWithERC20"
      | "revertWithERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256,address,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,(address,bool,address,bytes,uint256))",
    values: [PromiseOrValue<string>, RevertOptionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRevert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      RevertContextStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithERC20",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertWithERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      RevertContextStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256,address,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertWithERC20",
    data: BytesLike
  ): Result;

  events: {
    "Called(address,address,bytes,tuple)": EventFragment;
    "Deposited(address,address,uint256,address,bytes,tuple)": EventFragment;
    "DepositedAndCalled(address,address,uint256,address,bytes,tuple)": EventFragment;
    "Executed(address,uint256,bytes)": EventFragment;
    "ExecutedWithERC20(address,address,uint256,bytes)": EventFragment;
    "Reverted(address,address,uint256,bytes,tuple)": EventFragment;
    "UpdatedGatewayTSSAddress(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedAndCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedWithERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGatewayTSSAddress"): EventFragment;
}

export interface CalledEventObject {
  sender: string;
  receiver: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type CalledEvent = TypedEvent<
  [string, string, string, RevertOptionsStructOutput],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface DepositedEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  asset: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, string, string, RevertOptionsStructOutput],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface DepositedAndCalledEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  asset: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type DepositedAndCalledEvent = TypedEvent<
  [string, string, BigNumber, string, string, RevertOptionsStructOutput],
  DepositedAndCalledEventObject
>;

export type DepositedAndCalledEventFilter =
  TypedEventFilter<DepositedAndCalledEvent>;

export interface ExecutedEventObject {
  destination: string;
  value: BigNumber;
  data: string;
}
export type ExecutedEvent = TypedEvent<
  [string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface ExecutedWithERC20EventObject {
  token: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ExecutedWithERC20Event = TypedEvent<
  [string, string, BigNumber, string],
  ExecutedWithERC20EventObject
>;

export type ExecutedWithERC20EventFilter =
  TypedEventFilter<ExecutedWithERC20Event>;

export interface RevertedEventObject {
  to: string;
  token: string;
  amount: BigNumber;
  data: string;
  revertContext: RevertContextStructOutput;
}
export type RevertedEvent = TypedEvent<
  [string, string, BigNumber, string, RevertContextStructOutput],
  RevertedEventObject
>;

export type RevertedEventFilter = TypedEventFilter<RevertedEvent>;

export interface UpdatedGatewayTSSAddressEventObject {
  oldTSSAddress: string;
  newTSSAddress: string;
}
export type UpdatedGatewayTSSAddressEvent = TypedEvent<
  [string, string],
  UpdatedGatewayTSSAddressEventObject
>;

export type UpdatedGatewayTSSAddressEventFilter =
  TypedEventFilter<UpdatedGatewayTSSAddressEvent>;

export interface IGatewayEVM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayEVMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      messageContext: MessageContextStruct,
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRevert(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeWithERC20(
      messageContext: MessageContextStruct,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revertWithERC20(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  call(
    receiver: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    asset: PromiseOrValue<string>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<string>,
    revertOptions: RevertOptionsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    revertOptions: RevertOptionsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    asset: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    messageContext: MessageContextStruct,
    destination: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRevert(
    destination: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    revertContext: RevertContextStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeWithERC20(
    messageContext: MessageContextStruct,
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revertWithERC20(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    call(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      messageContext: MessageContextStruct,
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeRevert(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeWithERC20(
      messageContext: MessageContextStruct,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertWithERC20(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Called(address,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      payload?: null,
      revertOptions?: null
    ): CalledEventFilter;
    Called(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      payload?: null,
      revertOptions?: null
    ): CalledEventFilter;

    "Deposited(address,address,uint256,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedEventFilter;

    "DepositedAndCalled(address,address,uint256,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedAndCalledEventFilter;
    DepositedAndCalled(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedAndCalledEventFilter;

    "Executed(address,uint256,bytes)"(
      destination?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): ExecutedEventFilter;
    Executed(
      destination?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): ExecutedEventFilter;

    "ExecutedWithERC20(address,address,uint256,bytes)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): ExecutedWithERC20EventFilter;
    ExecutedWithERC20(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): ExecutedWithERC20EventFilter;

    "Reverted(address,address,uint256,bytes,tuple)"(
      to?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      revertContext?: null
    ): RevertedEventFilter;
    Reverted(
      to?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      revertContext?: null
    ): RevertedEventFilter;

    "UpdatedGatewayTSSAddress(address,address)"(
      oldTSSAddress?: null,
      newTSSAddress?: null
    ): UpdatedGatewayTSSAddressEventFilter;
    UpdatedGatewayTSSAddress(
      oldTSSAddress?: null,
      newTSSAddress?: null
    ): UpdatedGatewayTSSAddressEventFilter;
  };

  estimateGas: {
    call(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      messageContext: MessageContextStruct,
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRevert(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeWithERC20(
      messageContext: MessageContextStruct,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revertWithERC20(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall(address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall(address,uint256,address,bytes,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      messageContext: MessageContextStruct,
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRevert(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeWithERC20(
      messageContext: MessageContextStruct,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revertWithERC20(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
