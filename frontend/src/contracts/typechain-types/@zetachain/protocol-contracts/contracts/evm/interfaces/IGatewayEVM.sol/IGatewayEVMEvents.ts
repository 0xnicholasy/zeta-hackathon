/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export type RevertContextStruct = {
  sender: PromiseOrValue<string>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type RevertContextStructOutput = [string, string, BigNumber, string] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  revertMessage: string;
};

export interface IGatewayEVMEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Called(address,address,bytes,tuple)": EventFragment;
    "Deposited(address,address,uint256,address,bytes,tuple)": EventFragment;
    "DepositedAndCalled(address,address,uint256,address,bytes,tuple)": EventFragment;
    "Executed(address,uint256,bytes)": EventFragment;
    "ExecutedWithERC20(address,address,uint256,bytes)": EventFragment;
    "Reverted(address,address,uint256,bytes,tuple)": EventFragment;
    "UpdatedGatewayTSSAddress(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedAndCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedWithERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGatewayTSSAddress"): EventFragment;
}

export interface CalledEventObject {
  sender: string;
  receiver: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type CalledEvent = TypedEvent<
  [string, string, string, RevertOptionsStructOutput],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface DepositedEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  asset: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, string, string, RevertOptionsStructOutput],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface DepositedAndCalledEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  asset: string;
  payload: string;
  revertOptions: RevertOptionsStructOutput;
}
export type DepositedAndCalledEvent = TypedEvent<
  [string, string, BigNumber, string, string, RevertOptionsStructOutput],
  DepositedAndCalledEventObject
>;

export type DepositedAndCalledEventFilter =
  TypedEventFilter<DepositedAndCalledEvent>;

export interface ExecutedEventObject {
  destination: string;
  value: BigNumber;
  data: string;
}
export type ExecutedEvent = TypedEvent<
  [string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface ExecutedWithERC20EventObject {
  token: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ExecutedWithERC20Event = TypedEvent<
  [string, string, BigNumber, string],
  ExecutedWithERC20EventObject
>;

export type ExecutedWithERC20EventFilter =
  TypedEventFilter<ExecutedWithERC20Event>;

export interface RevertedEventObject {
  to: string;
  token: string;
  amount: BigNumber;
  data: string;
  revertContext: RevertContextStructOutput;
}
export type RevertedEvent = TypedEvent<
  [string, string, BigNumber, string, RevertContextStructOutput],
  RevertedEventObject
>;

export type RevertedEventFilter = TypedEventFilter<RevertedEvent>;

export interface UpdatedGatewayTSSAddressEventObject {
  oldTSSAddress: string;
  newTSSAddress: string;
}
export type UpdatedGatewayTSSAddressEvent = TypedEvent<
  [string, string],
  UpdatedGatewayTSSAddressEventObject
>;

export type UpdatedGatewayTSSAddressEventFilter =
  TypedEventFilter<UpdatedGatewayTSSAddressEvent>;

export interface IGatewayEVMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayEVMEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Called(address,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      payload?: null,
      revertOptions?: null
    ): CalledEventFilter;
    Called(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      payload?: null,
      revertOptions?: null
    ): CalledEventFilter;

    "Deposited(address,address,uint256,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedEventFilter;

    "DepositedAndCalled(address,address,uint256,address,bytes,tuple)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedAndCalledEventFilter;
    DepositedAndCalled(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      asset?: null,
      payload?: null,
      revertOptions?: null
    ): DepositedAndCalledEventFilter;

    "Executed(address,uint256,bytes)"(
      destination?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): ExecutedEventFilter;
    Executed(
      destination?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): ExecutedEventFilter;

    "ExecutedWithERC20(address,address,uint256,bytes)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): ExecutedWithERC20EventFilter;
    ExecutedWithERC20(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): ExecutedWithERC20EventFilter;

    "Reverted(address,address,uint256,bytes,tuple)"(
      to?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      revertContext?: null
    ): RevertedEventFilter;
    Reverted(
      to?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      revertContext?: null
    ): RevertedEventFilter;

    "UpdatedGatewayTSSAddress(address,address)"(
      oldTSSAddress?: null,
      newTSSAddress?: null
    ): UpdatedGatewayTSSAddressEventFilter;
    UpdatedGatewayTSSAddress(
      oldTSSAddress?: null,
      newTSSAddress?: null
    ): UpdatedGatewayTSSAddressEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
