/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type CallOptionsStruct = {
  gasLimit: PromiseOrValue<BigNumberish>;
  isArbitraryCall: PromiseOrValue<boolean>;
};

export type CallOptionsStructOutput = [BigNumber, boolean] & {
  gasLimit: BigNumber;
  isArbitraryCall: boolean;
};

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export interface IGatewayZEVMEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Called(address,address,bytes,bytes,tuple,tuple)": EventFragment;
    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnAndCalled"): EventFragment;
}

export interface CalledEventObject {
  sender: string;
  zrc20: string;
  receiver: string;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type CalledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface WithdrawnEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnAndCalledEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnAndCalledEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnAndCalledEventObject
>;

export type WithdrawnAndCalledEventFilter =
  TypedEventFilter<WithdrawnAndCalledEvent>;

export interface IGatewayZEVMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayZEVMEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Called(address,address,bytes,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;
    Called(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;

    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;

    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
    WithdrawnAndCalled(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
