/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type CallOptionsStruct = {
  gasLimit: PromiseOrValue<BigNumberish>;
  isArbitraryCall: PromiseOrValue<boolean>;
};

export type CallOptionsStructOutput = [BigNumber, boolean] & {
  gasLimit: BigNumber;
  isArbitraryCall: boolean;
};

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export type MessageContextStruct = {
  sender: PromiseOrValue<BytesLike>;
  senderEVM: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type MessageContextStructOutput = [string, string, BigNumber] & {
  sender: string;
  senderEVM: string;
  chainID: BigNumber;
};

export type RevertContextStruct = {
  sender: PromiseOrValue<string>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type RevertContextStructOutput = [string, string, BigNumber, string] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  revertMessage: string;
};

export interface IGatewayZEVMInterface extends utils.Interface {
  functions: {
    "call(bytes,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositAndCall((bytes,address,uint256),uint256,address,bytes)": FunctionFragment;
    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "depositAndRevert(address,uint256,address,(address,address,uint256,bytes))": FunctionFragment;
    "execute((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "executeRevert(address,(address,address,uint256,bytes))": FunctionFragment;
    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "call"
      | "deposit"
      | "depositAndCall((bytes,address,uint256),uint256,address,bytes)"
      | "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"
      | "depositAndRevert"
      | "execute"
      | "executeRevert"
      | "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"
      | "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"
      | "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"
      | "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall((bytes,address,uint256),uint256,address,bytes)",
    values: [
      MessageContextStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRevert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertContextStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRevert",
    values: [PromiseOrValue<string>, RevertContextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall((bytes,address,uint256),uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;

  events: {
    "Called(address,address,bytes,bytes,tuple,tuple)": EventFragment;
    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnAndCalled"): EventFragment;
}

export interface CalledEventObject {
  sender: string;
  zrc20: string;
  receiver: string;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type CalledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface WithdrawnEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnAndCalledEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnAndCalledEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnAndCalledEventObject
>;

export type WithdrawnAndCalledEventFilter =
  TypedEventFilter<WithdrawnAndCalledEvent>;

export interface IGatewayZEVM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayZEVMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  call(
    receiver: PromiseOrValue<BytesLike>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
    context: MessageContextStruct,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
    context: MessageContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRevert(
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    context: MessageContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRevert(
    target: PromiseOrValue<string>,
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Called(address,address,bytes,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;
    Called(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;

    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;

    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
    WithdrawnAndCalled(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
  };

  estimateGas: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
