/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type CallOptionsStruct = {
  gasLimit: PromiseOrValue<BigNumberish>;
  isArbitraryCall: PromiseOrValue<boolean>;
};

export type CallOptionsStructOutput = [BigNumber, boolean] & {
  gasLimit: BigNumber;
  isArbitraryCall: boolean;
};

export type RevertOptionsStruct = {
  revertAddress: PromiseOrValue<string>;
  callOnRevert: PromiseOrValue<boolean>;
  abortAddress: PromiseOrValue<string>;
  revertMessage: PromiseOrValue<BytesLike>;
  onRevertGasLimit: PromiseOrValue<BigNumberish>;
};

export type RevertOptionsStructOutput = [
  string,
  boolean,
  string,
  string,
  BigNumber
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: BigNumber;
};

export type MessageContextStruct = {
  sender: PromiseOrValue<BytesLike>;
  senderEVM: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type MessageContextStructOutput = [string, string, BigNumber] & {
  sender: string;
  senderEVM: string;
  chainID: BigNumber;
};

export type RevertContextStruct = {
  sender: PromiseOrValue<string>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type RevertContextStructOutput = [string, string, BigNumber, string] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  revertMessage: string;
};

export type AbortContextStruct = {
  sender: PromiseOrValue<BytesLike>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  outgoing: PromiseOrValue<boolean>;
  chainID: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type AbortContextStructOutput = [
  string,
  string,
  BigNumber,
  boolean,
  BigNumber,
  string
] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  outgoing: boolean;
  chainID: BigNumber;
  revertMessage: string;
};

export interface GatewayZEVMInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_MESSAGE_SIZE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "PROTOCOL_ADDRESS()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "call(bytes,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositAndCall((bytes,address,uint256),uint256,address,bytes)": FunctionFragment;
    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "depositAndRevert(address,uint256,address,(address,address,uint256,bytes))": FunctionFragment;
    "execute((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "executeAbort(address,(bytes,address,uint256,bool,uint256,bytes))": FunctionFragment;
    "executeRevert(address,(address,address,uint256,bytes))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))": FunctionFragment;
    "zetaToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_MESSAGE_SIZE"
      | "PAUSER_ROLE"
      | "PROTOCOL_ADDRESS"
      | "UPGRADE_INTERFACE_VERSION"
      | "call"
      | "deposit"
      | "depositAndCall((bytes,address,uint256),uint256,address,bytes)"
      | "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"
      | "depositAndRevert"
      | "execute"
      | "executeAbort"
      | "executeRevert"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "upgradeToAndCall"
      | "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"
      | "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"
      | "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"
      | "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"
      | "zetaToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MESSAGE_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall((bytes,address,uint256),uint256,address,bytes)",
    values: [
      MessageContextStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRevert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertContextStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      MessageContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAbort",
    values: [PromiseOrValue<string>, AbortContextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRevert",
    values: [PromiseOrValue<string>, RevertContextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CallOptionsStruct,
      RevertOptionsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "zetaToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MESSAGE_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall((bytes,address,uint256),uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeAbort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zetaToken", data: BytesLike): Result;

  events: {
    "Called(address,address,bytes,bytes,tuple,tuple)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnAndCalled"): EventFragment;
}

export interface CalledEventObject {
  sender: string;
  zrc20: string;
  receiver: string;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type CalledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawnEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnAndCalledEventObject {
  sender: string;
  chainId: BigNumber;
  receiver: string;
  zrc20: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
  callOptions: CallOptionsStructOutput;
  revertOptions: RevertOptionsStructOutput;
}
export type WithdrawnAndCalledEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    CallOptionsStructOutput,
    RevertOptionsStructOutput
  ],
  WithdrawnAndCalledEventObject
>;

export type WithdrawnAndCalledEventFilter =
  TypedEventFilter<WithdrawnAndCalledEvent>;

export interface GatewayZEVM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GatewayZEVMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_MESSAGE_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAbort(
      target: PromiseOrValue<string>,
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      zetaToken_: PromiseOrValue<string>,
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: CallOptionsStruct,
      arg5: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zetaToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_MESSAGE_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  call(
    receiver: PromiseOrValue<BytesLike>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
    context: MessageContextStruct,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
    context: MessageContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRevert(
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    context: MessageContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAbort(
    target: PromiseOrValue<string>,
    abortContext: AbortContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRevert(
    target: PromiseOrValue<string>,
    revertContext: RevertContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    zetaToken_: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    callerConfirmation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: RevertOptionsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: CallOptionsStruct,
    arg5: RevertOptionsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    callOptions: CallOptionsStruct,
    revertOptions: RevertOptionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zetaToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_MESSAGE_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAbort(
      target: PromiseOrValue<string>,
      abortContext: AbortContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      zetaToken_: PromiseOrValue<string>,
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: CallOptionsStruct,
      arg5: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    zetaToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Called(address,address,bytes,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;
    Called(
      sender?: PromiseOrValue<string> | null,
      zrc20?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): CalledEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Withdrawn(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnEventFilter;

    "WithdrawnAndCalled(address,uint256,bytes,address,uint256,uint256,uint256,bytes,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
    WithdrawnAndCalled(
      sender?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      zrc20?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null,
      callOptions?: null,
      revertOptions?: null
    ): WithdrawnAndCalledEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MESSAGE_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAbort(
      target: PromiseOrValue<string>,
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      zetaToken_: PromiseOrValue<string>,
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: CallOptionsStruct,
      arg5: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zetaToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MESSAGE_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    call(
      receiver: PromiseOrValue<BytesLike>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall((bytes,address,uint256),uint256,address,bytes)"(
      context: MessageContextStruct,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)"(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRevert(
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      context: MessageContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAbort(
      target: PromiseOrValue<string>,
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRevert(
      target: PromiseOrValue<string>,
      revertContext: RevertContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      zetaToken_: PromiseOrValue<string>,
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,uint256,address,(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,uint256,uint256,(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawAndCall(bytes,uint256,uint256,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: CallOptionsStruct,
      arg5: RevertOptionsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawAndCall(bytes,uint256,address,bytes,(uint256,bool),(address,bool,address,bytes,uint256))"(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      callOptions: CallOptionsStruct,
      revertOptions: RevertOptionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zetaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
